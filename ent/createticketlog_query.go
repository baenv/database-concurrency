// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database-concurrency/ent/createticketlog"
	"database-concurrency/ent/predicate"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CreateTicketLogQuery is the builder for querying CreateTicketLog entities.
type CreateTicketLogQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CreateTicketLog
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CreateTicketLogQuery builder.
func (ctlq *CreateTicketLogQuery) Where(ps ...predicate.CreateTicketLog) *CreateTicketLogQuery {
	ctlq.predicates = append(ctlq.predicates, ps...)
	return ctlq
}

// Limit adds a limit step to the query.
func (ctlq *CreateTicketLogQuery) Limit(limit int) *CreateTicketLogQuery {
	ctlq.limit = &limit
	return ctlq
}

// Offset adds an offset step to the query.
func (ctlq *CreateTicketLogQuery) Offset(offset int) *CreateTicketLogQuery {
	ctlq.offset = &offset
	return ctlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ctlq *CreateTicketLogQuery) Unique(unique bool) *CreateTicketLogQuery {
	ctlq.unique = &unique
	return ctlq
}

// Order adds an order step to the query.
func (ctlq *CreateTicketLogQuery) Order(o ...OrderFunc) *CreateTicketLogQuery {
	ctlq.order = append(ctlq.order, o...)
	return ctlq
}

// First returns the first CreateTicketLog entity from the query.
// Returns a *NotFoundError when no CreateTicketLog was found.
func (ctlq *CreateTicketLogQuery) First(ctx context.Context) (*CreateTicketLog, error) {
	nodes, err := ctlq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{createticketlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) FirstX(ctx context.Context) *CreateTicketLog {
	node, err := ctlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CreateTicketLog ID from the query.
// Returns a *NotFoundError when no CreateTicketLog ID was found.
func (ctlq *CreateTicketLogQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ctlq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{createticketlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ctlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CreateTicketLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CreateTicketLog entity is found.
// Returns a *NotFoundError when no CreateTicketLog entities are found.
func (ctlq *CreateTicketLogQuery) Only(ctx context.Context) (*CreateTicketLog, error) {
	nodes, err := ctlq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{createticketlog.Label}
	default:
		return nil, &NotSingularError{createticketlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) OnlyX(ctx context.Context) *CreateTicketLog {
	node, err := ctlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CreateTicketLog ID in the query.
// Returns a *NotSingularError when more than one CreateTicketLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (ctlq *CreateTicketLogQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ctlq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{createticketlog.Label}
	default:
		err = &NotSingularError{createticketlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ctlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CreateTicketLogs.
func (ctlq *CreateTicketLogQuery) All(ctx context.Context) ([]*CreateTicketLog, error) {
	if err := ctlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ctlq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) AllX(ctx context.Context) []*CreateTicketLog {
	nodes, err := ctlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CreateTicketLog IDs.
func (ctlq *CreateTicketLogQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := ctlq.Select(createticketlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ctlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ctlq *CreateTicketLogQuery) Count(ctx context.Context) (int, error) {
	if err := ctlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ctlq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) CountX(ctx context.Context) int {
	count, err := ctlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ctlq *CreateTicketLogQuery) Exist(ctx context.Context) (bool, error) {
	if err := ctlq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ctlq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ctlq *CreateTicketLogQuery) ExistX(ctx context.Context) bool {
	exist, err := ctlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CreateTicketLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ctlq *CreateTicketLogQuery) Clone() *CreateTicketLogQuery {
	if ctlq == nil {
		return nil
	}
	return &CreateTicketLogQuery{
		config:     ctlq.config,
		limit:      ctlq.limit,
		offset:     ctlq.offset,
		order:      append([]OrderFunc{}, ctlq.order...),
		predicates: append([]predicate.CreateTicketLog{}, ctlq.predicates...),
		// clone intermediate query.
		sql:    ctlq.sql.Clone(),
		path:   ctlq.path,
		unique: ctlq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UniqueID uuid.UUID `json:"unique_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CreateTicketLog.Query().
//		GroupBy(createticketlog.FieldUniqueID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ctlq *CreateTicketLogQuery) GroupBy(field string, fields ...string) *CreateTicketLogGroupBy {
	grbuild := &CreateTicketLogGroupBy{config: ctlq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ctlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ctlq.sqlQuery(ctx), nil
	}
	grbuild.label = createticketlog.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UniqueID uuid.UUID `json:"unique_id,omitempty"`
//	}
//
//	client.CreateTicketLog.Query().
//		Select(createticketlog.FieldUniqueID).
//		Scan(ctx, &v)
func (ctlq *CreateTicketLogQuery) Select(fields ...string) *CreateTicketLogSelect {
	ctlq.fields = append(ctlq.fields, fields...)
	selbuild := &CreateTicketLogSelect{CreateTicketLogQuery: ctlq}
	selbuild.label = createticketlog.Label
	selbuild.flds, selbuild.scan = &ctlq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a CreateTicketLogSelect configured with the given aggregations.
func (ctlq *CreateTicketLogQuery) Aggregate(fns ...AggregateFunc) *CreateTicketLogSelect {
	return ctlq.Select().Aggregate(fns...)
}

func (ctlq *CreateTicketLogQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ctlq.fields {
		if !createticketlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ctlq.path != nil {
		prev, err := ctlq.path(ctx)
		if err != nil {
			return err
		}
		ctlq.sql = prev
	}
	return nil
}

func (ctlq *CreateTicketLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CreateTicketLog, error) {
	var (
		nodes = []*CreateTicketLog{}
		_spec = ctlq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CreateTicketLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CreateTicketLog{config: ctlq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(ctlq.modifiers) > 0 {
		_spec.Modifiers = ctlq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ctlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (ctlq *CreateTicketLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ctlq.querySpec()
	if len(ctlq.modifiers) > 0 {
		_spec.Modifiers = ctlq.modifiers
	}
	_spec.Node.Columns = ctlq.fields
	if len(ctlq.fields) > 0 {
		_spec.Unique = ctlq.unique != nil && *ctlq.unique
	}
	return sqlgraph.CountNodes(ctx, ctlq.driver, _spec)
}

func (ctlq *CreateTicketLogQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ctlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ctlq *CreateTicketLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   createticketlog.Table,
			Columns: createticketlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: createticketlog.FieldID,
			},
		},
		From:   ctlq.sql,
		Unique: true,
	}
	if unique := ctlq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ctlq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, createticketlog.FieldID)
		for i := range fields {
			if fields[i] != createticketlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ctlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ctlq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ctlq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ctlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ctlq *CreateTicketLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ctlq.driver.Dialect())
	t1 := builder.Table(createticketlog.Table)
	columns := ctlq.fields
	if len(columns) == 0 {
		columns = createticketlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ctlq.sql != nil {
		selector = ctlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ctlq.unique != nil && *ctlq.unique {
		selector.Distinct()
	}
	for _, m := range ctlq.modifiers {
		m(selector)
	}
	for _, p := range ctlq.predicates {
		p(selector)
	}
	for _, p := range ctlq.order {
		p(selector)
	}
	if offset := ctlq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ctlq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ctlq *CreateTicketLogQuery) ForUpdate(opts ...sql.LockOption) *CreateTicketLogQuery {
	if ctlq.driver.Dialect() == dialect.Postgres {
		ctlq.Unique(false)
	}
	ctlq.modifiers = append(ctlq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ctlq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ctlq *CreateTicketLogQuery) ForShare(opts ...sql.LockOption) *CreateTicketLogQuery {
	if ctlq.driver.Dialect() == dialect.Postgres {
		ctlq.Unique(false)
	}
	ctlq.modifiers = append(ctlq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ctlq
}

// CreateTicketLogGroupBy is the group-by builder for CreateTicketLog entities.
type CreateTicketLogGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ctlgb *CreateTicketLogGroupBy) Aggregate(fns ...AggregateFunc) *CreateTicketLogGroupBy {
	ctlgb.fns = append(ctlgb.fns, fns...)
	return ctlgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ctlgb *CreateTicketLogGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ctlgb.path(ctx)
	if err != nil {
		return err
	}
	ctlgb.sql = query
	return ctlgb.sqlScan(ctx, v)
}

func (ctlgb *CreateTicketLogGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ctlgb.fields {
		if !createticketlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ctlgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ctlgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ctlgb *CreateTicketLogGroupBy) sqlQuery() *sql.Selector {
	selector := ctlgb.sql.Select()
	aggregation := make([]string, 0, len(ctlgb.fns))
	for _, fn := range ctlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ctlgb.fields)+len(ctlgb.fns))
		for _, f := range ctlgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ctlgb.fields...)...)
}

// CreateTicketLogSelect is the builder for selecting fields of CreateTicketLog entities.
type CreateTicketLogSelect struct {
	*CreateTicketLogQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ctls *CreateTicketLogSelect) Aggregate(fns ...AggregateFunc) *CreateTicketLogSelect {
	ctls.fns = append(ctls.fns, fns...)
	return ctls
}

// Scan applies the selector query and scans the result into the given value.
func (ctls *CreateTicketLogSelect) Scan(ctx context.Context, v any) error {
	if err := ctls.prepareQuery(ctx); err != nil {
		return err
	}
	ctls.sql = ctls.CreateTicketLogQuery.sqlQuery(ctx)
	return ctls.sqlScan(ctx, v)
}

func (ctls *CreateTicketLogSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ctls.fns))
	for _, fn := range ctls.fns {
		aggregation = append(aggregation, fn(ctls.sql))
	}
	switch n := len(*ctls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ctls.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ctls.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ctls.sql.Query()
	if err := ctls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
