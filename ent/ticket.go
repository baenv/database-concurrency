// Code generated by ent, DO NOT EDIT.

package ent

import (
	"database-concurrency/ent/ticket"
	"database-concurrency/ent/ticketevent"
	"database-concurrency/ent/user"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Versions holds the value of the "versions" field.
	Versions string `json:"versions,omitempty"`
	// LastEventID holds the value of the "last_event_id" field.
	LastEventID uuid.UUID `json:"last_event_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges TicketEdges `json:"edges"`
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// LastEvent holds the value of the last_event edge.
	LastEvent *TicketEvent `json:"last_event,omitempty"`
	// TicketEvents holds the value of the ticket_events edge.
	TicketEvents []*TicketEvent `json:"ticket_events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LastEventOrErr returns the LastEvent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) LastEventOrErr() (*TicketEvent, error) {
	if e.loadedTypes[1] {
		if e.LastEvent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ticketevent.Label}
		}
		return e.LastEvent, nil
	}
	return nil, &NotLoadedError{edge: "last_event"}
}

// TicketEventsOrErr returns the TicketEvents value or an error if the edge
// was not loaded in eager-loading.
func (e TicketEdges) TicketEventsOrErr() ([]*TicketEvent, error) {
	if e.loadedTypes[2] {
		return e.TicketEvents, nil
	}
	return nil, &NotLoadedError{edge: "ticket_events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldMetadata:
			values[i] = new([]byte)
		case ticket.FieldStatus, ticket.FieldVersions:
			values[i] = new(sql.NullString)
		case ticket.FieldCreatedAt, ticket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ticket.FieldID, ticket.FieldUserID, ticket.FieldLastEventID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ticket", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case ticket.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				t.UserID = *value
			}
		case ticket.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case ticket.FieldVersions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field versions", values[i])
			} else if value.Valid {
				t.Versions = value.String
			}
		case ticket.FieldLastEventID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field last_event_id", values[i])
			} else if value != nil {
				t.LastEventID = *value
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Ticket entity.
func (t *Ticket) QueryUser() *UserQuery {
	return (&TicketClient{config: t.config}).QueryUser(t)
}

// QueryLastEvent queries the "last_event" edge of the Ticket entity.
func (t *Ticket) QueryLastEvent() *TicketEventQuery {
	return (&TicketClient{config: t.config}).QueryLastEvent(t)
}

// QueryTicketEvents queries the "ticket_events" edge of the Ticket entity.
func (t *Ticket) QueryTicketEvents() *TicketEventQuery {
	return (&TicketClient{config: t.config}).QueryTicketEvents(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return (&TicketClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", t.Metadata))
	builder.WriteString(", ")
	builder.WriteString("versions=")
	builder.WriteString(t.Versions)
	builder.WriteString(", ")
	builder.WriteString("last_event_id=")
	builder.WriteString(fmt.Sprintf("%v", t.LastEventID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket

func (t Tickets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
