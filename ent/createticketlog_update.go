// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database-concurrency/ent/createticketlog"
	"database-concurrency/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CreateTicketLogUpdate is the builder for updating CreateTicketLog entities.
type CreateTicketLogUpdate struct {
	config
	hooks    []Hook
	mutation *CreateTicketLogMutation
}

// Where appends a list predicates to the CreateTicketLogUpdate builder.
func (ctlu *CreateTicketLogUpdate) Where(ps ...predicate.CreateTicketLog) *CreateTicketLogUpdate {
	ctlu.mutation.Where(ps...)
	return ctlu
}

// SetTicketID sets the "ticket_id" field.
func (ctlu *CreateTicketLogUpdate) SetTicketID(u uuid.UUID) *CreateTicketLogUpdate {
	ctlu.mutation.SetTicketID(u)
	return ctlu
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (ctlu *CreateTicketLogUpdate) SetNillableTicketID(u *uuid.UUID) *CreateTicketLogUpdate {
	if u != nil {
		ctlu.SetTicketID(*u)
	}
	return ctlu
}

// SetUniqueID sets the "unique_id" field.
func (ctlu *CreateTicketLogUpdate) SetUniqueID(u uuid.UUID) *CreateTicketLogUpdate {
	ctlu.mutation.SetUniqueID(u)
	return ctlu
}

// SetCreatedAt sets the "created_at" field.
func (ctlu *CreateTicketLogUpdate) SetCreatedAt(t time.Time) *CreateTicketLogUpdate {
	ctlu.mutation.SetCreatedAt(t)
	return ctlu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctlu *CreateTicketLogUpdate) SetNillableCreatedAt(t *time.Time) *CreateTicketLogUpdate {
	if t != nil {
		ctlu.SetCreatedAt(*t)
	}
	return ctlu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctlu *CreateTicketLogUpdate) SetUpdatedAt(t time.Time) *CreateTicketLogUpdate {
	ctlu.mutation.SetUpdatedAt(t)
	return ctlu
}

// Mutation returns the CreateTicketLogMutation object of the builder.
func (ctlu *CreateTicketLogUpdate) Mutation() *CreateTicketLogMutation {
	return ctlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctlu *CreateTicketLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ctlu.defaults()
	if len(ctlu.hooks) == 0 {
		affected, err = ctlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CreateTicketLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctlu.mutation = mutation
			affected, err = ctlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctlu.hooks) - 1; i >= 0; i-- {
			if ctlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctlu *CreateTicketLogUpdate) SaveX(ctx context.Context) int {
	affected, err := ctlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctlu *CreateTicketLogUpdate) Exec(ctx context.Context) error {
	_, err := ctlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctlu *CreateTicketLogUpdate) ExecX(ctx context.Context) {
	if err := ctlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctlu *CreateTicketLogUpdate) defaults() {
	if _, ok := ctlu.mutation.UpdatedAt(); !ok {
		v := createticketlog.UpdateDefaultUpdatedAt()
		ctlu.mutation.SetUpdatedAt(v)
	}
}

func (ctlu *CreateTicketLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   createticketlog.Table,
			Columns: createticketlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: createticketlog.FieldID,
			},
		},
	}
	if ps := ctlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctlu.mutation.TicketID(); ok {
		_spec.SetField(createticketlog.FieldTicketID, field.TypeUUID, value)
	}
	if value, ok := ctlu.mutation.UniqueID(); ok {
		_spec.SetField(createticketlog.FieldUniqueID, field.TypeUUID, value)
	}
	if value, ok := ctlu.mutation.CreatedAt(); ok {
		_spec.SetField(createticketlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctlu.mutation.UpdatedAt(); ok {
		_spec.SetField(createticketlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{createticketlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CreateTicketLogUpdateOne is the builder for updating a single CreateTicketLog entity.
type CreateTicketLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreateTicketLogMutation
}

// SetTicketID sets the "ticket_id" field.
func (ctluo *CreateTicketLogUpdateOne) SetTicketID(u uuid.UUID) *CreateTicketLogUpdateOne {
	ctluo.mutation.SetTicketID(u)
	return ctluo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (ctluo *CreateTicketLogUpdateOne) SetNillableTicketID(u *uuid.UUID) *CreateTicketLogUpdateOne {
	if u != nil {
		ctluo.SetTicketID(*u)
	}
	return ctluo
}

// SetUniqueID sets the "unique_id" field.
func (ctluo *CreateTicketLogUpdateOne) SetUniqueID(u uuid.UUID) *CreateTicketLogUpdateOne {
	ctluo.mutation.SetUniqueID(u)
	return ctluo
}

// SetCreatedAt sets the "created_at" field.
func (ctluo *CreateTicketLogUpdateOne) SetCreatedAt(t time.Time) *CreateTicketLogUpdateOne {
	ctluo.mutation.SetCreatedAt(t)
	return ctluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctluo *CreateTicketLogUpdateOne) SetNillableCreatedAt(t *time.Time) *CreateTicketLogUpdateOne {
	if t != nil {
		ctluo.SetCreatedAt(*t)
	}
	return ctluo
}

// SetUpdatedAt sets the "updated_at" field.
func (ctluo *CreateTicketLogUpdateOne) SetUpdatedAt(t time.Time) *CreateTicketLogUpdateOne {
	ctluo.mutation.SetUpdatedAt(t)
	return ctluo
}

// Mutation returns the CreateTicketLogMutation object of the builder.
func (ctluo *CreateTicketLogUpdateOne) Mutation() *CreateTicketLogMutation {
	return ctluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctluo *CreateTicketLogUpdateOne) Select(field string, fields ...string) *CreateTicketLogUpdateOne {
	ctluo.fields = append([]string{field}, fields...)
	return ctluo
}

// Save executes the query and returns the updated CreateTicketLog entity.
func (ctluo *CreateTicketLogUpdateOne) Save(ctx context.Context) (*CreateTicketLog, error) {
	var (
		err  error
		node *CreateTicketLog
	)
	ctluo.defaults()
	if len(ctluo.hooks) == 0 {
		node, err = ctluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CreateTicketLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctluo.mutation = mutation
			node, err = ctluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctluo.hooks) - 1; i >= 0; i-- {
			if ctluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CreateTicketLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CreateTicketLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctluo *CreateTicketLogUpdateOne) SaveX(ctx context.Context) *CreateTicketLog {
	node, err := ctluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctluo *CreateTicketLogUpdateOne) Exec(ctx context.Context) error {
	_, err := ctluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctluo *CreateTicketLogUpdateOne) ExecX(ctx context.Context) {
	if err := ctluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctluo *CreateTicketLogUpdateOne) defaults() {
	if _, ok := ctluo.mutation.UpdatedAt(); !ok {
		v := createticketlog.UpdateDefaultUpdatedAt()
		ctluo.mutation.SetUpdatedAt(v)
	}
}

func (ctluo *CreateTicketLogUpdateOne) sqlSave(ctx context.Context) (_node *CreateTicketLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   createticketlog.Table,
			Columns: createticketlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: createticketlog.FieldID,
			},
		},
	}
	id, ok := ctluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CreateTicketLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, createticketlog.FieldID)
		for _, f := range fields {
			if !createticketlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != createticketlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctluo.mutation.TicketID(); ok {
		_spec.SetField(createticketlog.FieldTicketID, field.TypeUUID, value)
	}
	if value, ok := ctluo.mutation.UniqueID(); ok {
		_spec.SetField(createticketlog.FieldUniqueID, field.TypeUUID, value)
	}
	if value, ok := ctluo.mutation.CreatedAt(); ok {
		_spec.SetField(createticketlog.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ctluo.mutation.UpdatedAt(); ok {
		_spec.SetField(createticketlog.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &CreateTicketLog{config: ctluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{createticketlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
