// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"database-concurrency/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Versions applies equality check predicate on the "versions" field. It's identical to VersionsEQ.
func Versions(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersions), v))
	})
}

// LastEventID applies equality check predicate on the "last_event_id" field. It's identical to LastEventIDEQ.
func LastEventID(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastEventID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// VersionsEQ applies the EQ predicate on the "versions" field.
func VersionsEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersions), v))
	})
}

// VersionsNEQ applies the NEQ predicate on the "versions" field.
func VersionsNEQ(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersions), v))
	})
}

// VersionsIn applies the In predicate on the "versions" field.
func VersionsIn(vs ...string) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersions), v...))
	})
}

// VersionsNotIn applies the NotIn predicate on the "versions" field.
func VersionsNotIn(vs ...string) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersions), v...))
	})
}

// VersionsGT applies the GT predicate on the "versions" field.
func VersionsGT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersions), v))
	})
}

// VersionsGTE applies the GTE predicate on the "versions" field.
func VersionsGTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersions), v))
	})
}

// VersionsLT applies the LT predicate on the "versions" field.
func VersionsLT(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersions), v))
	})
}

// VersionsLTE applies the LTE predicate on the "versions" field.
func VersionsLTE(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersions), v))
	})
}

// VersionsContains applies the Contains predicate on the "versions" field.
func VersionsContains(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVersions), v))
	})
}

// VersionsHasPrefix applies the HasPrefix predicate on the "versions" field.
func VersionsHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVersions), v))
	})
}

// VersionsHasSuffix applies the HasSuffix predicate on the "versions" field.
func VersionsHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVersions), v))
	})
}

// VersionsEqualFold applies the EqualFold predicate on the "versions" field.
func VersionsEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVersions), v))
	})
}

// VersionsContainsFold applies the ContainsFold predicate on the "versions" field.
func VersionsContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVersions), v))
	})
}

// LastEventIDEQ applies the EQ predicate on the "last_event_id" field.
func LastEventIDEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastEventID), v))
	})
}

// LastEventIDNEQ applies the NEQ predicate on the "last_event_id" field.
func LastEventIDNEQ(v uuid.UUID) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastEventID), v))
	})
}

// LastEventIDIn applies the In predicate on the "last_event_id" field.
func LastEventIDIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastEventID), v...))
	})
}

// LastEventIDNotIn applies the NotIn predicate on the "last_event_id" field.
func LastEventIDNotIn(vs ...uuid.UUID) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastEventID), v...))
	})
}

// LastEventIDIsNil applies the IsNil predicate on the "last_event_id" field.
func LastEventIDIsNil() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastEventID)))
	})
}

// LastEventIDNotNil applies the NotNil predicate on the "last_event_id" field.
func LastEventIDNotNil() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastEventID)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ticket {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLastEvent applies the HasEdge predicate on the "last_event" edge.
func HasLastEvent() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LastEventTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LastEventTable, LastEventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLastEventWith applies the HasEdge predicate on the "last_event" edge with a given conditions (other predicates).
func HasLastEventWith(preds ...predicate.TicketEvent) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LastEventInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LastEventTable, LastEventColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTicketEvents applies the HasEdge predicate on the "ticket_events" edge.
func HasTicketEvents() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TicketEventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TicketEventsTable, TicketEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketEventsWith applies the HasEdge predicate on the "ticket_events" edge with a given conditions (other predicates).
func HasTicketEventsWith(preds ...predicate.TicketEvent) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TicketEventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TicketEventsTable, TicketEventsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		p(s.Not())
	})
}
