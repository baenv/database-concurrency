// Code generated by ent, DO NOT EDIT.

package serviceprodiver

import (
	"database-concurrency/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// VerdorRef applies equality check predicate on the "verdor_ref" field. It's identical to VerdorRefEQ.
func VerdorRef(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerdorRef), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// VerdorRefEQ applies the EQ predicate on the "verdor_ref" field.
func VerdorRefEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefNEQ applies the NEQ predicate on the "verdor_ref" field.
func VerdorRefNEQ(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefIn applies the In predicate on the "verdor_ref" field.
func VerdorRefIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVerdorRef), v...))
	})
}

// VerdorRefNotIn applies the NotIn predicate on the "verdor_ref" field.
func VerdorRefNotIn(vs ...string) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVerdorRef), v...))
	})
}

// VerdorRefGT applies the GT predicate on the "verdor_ref" field.
func VerdorRefGT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefGTE applies the GTE predicate on the "verdor_ref" field.
func VerdorRefGTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefLT applies the LT predicate on the "verdor_ref" field.
func VerdorRefLT(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefLTE applies the LTE predicate on the "verdor_ref" field.
func VerdorRefLTE(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefContains applies the Contains predicate on the "verdor_ref" field.
func VerdorRefContains(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefHasPrefix applies the HasPrefix predicate on the "verdor_ref" field.
func VerdorRefHasPrefix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefHasSuffix applies the HasSuffix predicate on the "verdor_ref" field.
func VerdorRefHasSuffix(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefEqualFold applies the EqualFold predicate on the "verdor_ref" field.
func VerdorRefEqualFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVerdorRef), v))
	})
}

// VerdorRefContainsFold applies the ContainsFold predicate on the "verdor_ref" field.
func VerdorRefContainsFold(v string) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVerdorRef), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ServiceProdiver {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceProdiver) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceProdiver) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceProdiver) predicate.ServiceProdiver {
	return predicate.ServiceProdiver(func(s *sql.Selector) {
		p(s.Not())
	})
}
