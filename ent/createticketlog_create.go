// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database-concurrency/ent/createticketlog"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CreateTicketLogCreate is the builder for creating a CreateTicketLog entity.
type CreateTicketLogCreate struct {
	config
	mutation *CreateTicketLogMutation
	hooks    []Hook
}

// SetUniqueID sets the "unique_id" field.
func (ctlc *CreateTicketLogCreate) SetUniqueID(u uuid.UUID) *CreateTicketLogCreate {
	ctlc.mutation.SetUniqueID(u)
	return ctlc
}

// SetCreatedAt sets the "created_at" field.
func (ctlc *CreateTicketLogCreate) SetCreatedAt(t time.Time) *CreateTicketLogCreate {
	ctlc.mutation.SetCreatedAt(t)
	return ctlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctlc *CreateTicketLogCreate) SetNillableCreatedAt(t *time.Time) *CreateTicketLogCreate {
	if t != nil {
		ctlc.SetCreatedAt(*t)
	}
	return ctlc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctlc *CreateTicketLogCreate) SetUpdatedAt(t time.Time) *CreateTicketLogCreate {
	ctlc.mutation.SetUpdatedAt(t)
	return ctlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctlc *CreateTicketLogCreate) SetNillableUpdatedAt(t *time.Time) *CreateTicketLogCreate {
	if t != nil {
		ctlc.SetUpdatedAt(*t)
	}
	return ctlc
}

// SetID sets the "id" field.
func (ctlc *CreateTicketLogCreate) SetID(u uuid.UUID) *CreateTicketLogCreate {
	ctlc.mutation.SetID(u)
	return ctlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctlc *CreateTicketLogCreate) SetNillableID(u *uuid.UUID) *CreateTicketLogCreate {
	if u != nil {
		ctlc.SetID(*u)
	}
	return ctlc
}

// Mutation returns the CreateTicketLogMutation object of the builder.
func (ctlc *CreateTicketLogCreate) Mutation() *CreateTicketLogMutation {
	return ctlc.mutation
}

// Save creates the CreateTicketLog in the database.
func (ctlc *CreateTicketLogCreate) Save(ctx context.Context) (*CreateTicketLog, error) {
	var (
		err  error
		node *CreateTicketLog
	)
	ctlc.defaults()
	if len(ctlc.hooks) == 0 {
		if err = ctlc.check(); err != nil {
			return nil, err
		}
		node, err = ctlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CreateTicketLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctlc.check(); err != nil {
				return nil, err
			}
			ctlc.mutation = mutation
			if node, err = ctlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctlc.hooks) - 1; i >= 0; i-- {
			if ctlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctlc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctlc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CreateTicketLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CreateTicketLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctlc *CreateTicketLogCreate) SaveX(ctx context.Context) *CreateTicketLog {
	v, err := ctlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctlc *CreateTicketLogCreate) Exec(ctx context.Context) error {
	_, err := ctlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctlc *CreateTicketLogCreate) ExecX(ctx context.Context) {
	if err := ctlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctlc *CreateTicketLogCreate) defaults() {
	if _, ok := ctlc.mutation.CreatedAt(); !ok {
		v := createticketlog.DefaultCreatedAt()
		ctlc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctlc.mutation.UpdatedAt(); !ok {
		v := createticketlog.DefaultUpdatedAt()
		ctlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctlc.mutation.ID(); !ok {
		v := createticketlog.DefaultID()
		ctlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctlc *CreateTicketLogCreate) check() error {
	if _, ok := ctlc.mutation.UniqueID(); !ok {
		return &ValidationError{Name: "unique_id", err: errors.New(`ent: missing required field "CreateTicketLog.unique_id"`)}
	}
	if _, ok := ctlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CreateTicketLog.created_at"`)}
	}
	if _, ok := ctlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CreateTicketLog.updated_at"`)}
	}
	return nil
}

func (ctlc *CreateTicketLogCreate) sqlSave(ctx context.Context) (*CreateTicketLog, error) {
	_node, _spec := ctlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ctlc *CreateTicketLogCreate) createSpec() (*CreateTicketLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CreateTicketLog{config: ctlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: createticketlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: createticketlog.FieldID,
			},
		}
	)
	if id, ok := ctlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ctlc.mutation.UniqueID(); ok {
		_spec.SetField(createticketlog.FieldUniqueID, field.TypeUUID, value)
		_node.UniqueID = value
	}
	if value, ok := ctlc.mutation.CreatedAt(); ok {
		_spec.SetField(createticketlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ctlc.mutation.UpdatedAt(); ok {
		_spec.SetField(createticketlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CreateTicketLogCreateBulk is the builder for creating many CreateTicketLog entities in bulk.
type CreateTicketLogCreateBulk struct {
	config
	builders []*CreateTicketLogCreate
}

// Save creates the CreateTicketLog entities in the database.
func (ctlcb *CreateTicketLogCreateBulk) Save(ctx context.Context) ([]*CreateTicketLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctlcb.builders))
	nodes := make([]*CreateTicketLog, len(ctlcb.builders))
	mutators := make([]Mutator, len(ctlcb.builders))
	for i := range ctlcb.builders {
		func(i int, root context.Context) {
			builder := ctlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CreateTicketLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctlcb *CreateTicketLogCreateBulk) SaveX(ctx context.Context) []*CreateTicketLog {
	v, err := ctlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctlcb *CreateTicketLogCreateBulk) Exec(ctx context.Context) error {
	_, err := ctlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctlcb *CreateTicketLogCreateBulk) ExecX(ctx context.Context) {
	if err := ctlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
