// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database-concurrency/ent/predicate"
	"database-concurrency/ent/ticket"
	"database-concurrency/ent/ticketevent"
	"database-concurrency/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TicketEventUpdate is the builder for updating TicketEvent entities.
type TicketEventUpdate struct {
	config
	hooks    []Hook
	mutation *TicketEventMutation
}

// Where appends a list predicates to the TicketEventUpdate builder.
func (teu *TicketEventUpdate) Where(ps ...predicate.TicketEvent) *TicketEventUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetTicketID sets the "ticket_id" field.
func (teu *TicketEventUpdate) SetTicketID(u uuid.UUID) *TicketEventUpdate {
	teu.mutation.SetTicketID(u)
	return teu
}

// SetUserID sets the "user_id" field.
func (teu *TicketEventUpdate) SetUserID(u uuid.UUID) *TicketEventUpdate {
	teu.mutation.SetUserID(u)
	return teu
}

// SetType sets the "type" field.
func (teu *TicketEventUpdate) SetType(s string) *TicketEventUpdate {
	teu.mutation.SetType(s)
	return teu
}

// SetMetadada sets the "metadada" field.
func (teu *TicketEventUpdate) SetMetadada(m map[string]interface{}) *TicketEventUpdate {
	teu.mutation.SetMetadada(m)
	return teu
}

// ClearMetadada clears the value of the "metadada" field.
func (teu *TicketEventUpdate) ClearMetadada() *TicketEventUpdate {
	teu.mutation.ClearMetadada()
	return teu
}

// SetVersions sets the "versions" field.
func (teu *TicketEventUpdate) SetVersions(s string) *TicketEventUpdate {
	teu.mutation.SetVersions(s)
	return teu
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (teu *TicketEventUpdate) SetNillableVersions(s *string) *TicketEventUpdate {
	if s != nil {
		teu.SetVersions(*s)
	}
	return teu
}

// ClearVersions clears the value of the "versions" field.
func (teu *TicketEventUpdate) ClearVersions() *TicketEventUpdate {
	teu.mutation.ClearVersions()
	return teu
}

// SetCreatedAt sets the "created_at" field.
func (teu *TicketEventUpdate) SetCreatedAt(t time.Time) *TicketEventUpdate {
	teu.mutation.SetCreatedAt(t)
	return teu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (teu *TicketEventUpdate) SetNillableCreatedAt(t *time.Time) *TicketEventUpdate {
	if t != nil {
		teu.SetCreatedAt(*t)
	}
	return teu
}

// SetUpdatedAt sets the "updated_at" field.
func (teu *TicketEventUpdate) SetUpdatedAt(t time.Time) *TicketEventUpdate {
	teu.mutation.SetUpdatedAt(t)
	return teu
}

// SetUser sets the "user" edge to the User entity.
func (teu *TicketEventUpdate) SetUser(u *User) *TicketEventUpdate {
	return teu.SetUserID(u.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (teu *TicketEventUpdate) SetTicket(t *Ticket) *TicketEventUpdate {
	return teu.SetTicketID(t.ID)
}

// Mutation returns the TicketEventMutation object of the builder.
func (teu *TicketEventUpdate) Mutation() *TicketEventMutation {
	return teu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (teu *TicketEventUpdate) ClearUser() *TicketEventUpdate {
	teu.mutation.ClearUser()
	return teu
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (teu *TicketEventUpdate) ClearTicket() *TicketEventUpdate {
	teu.mutation.ClearTicket()
	return teu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TicketEventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	teu.defaults()
	if len(teu.hooks) == 0 {
		if err = teu.check(); err != nil {
			return 0, err
		}
		affected, err = teu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = teu.check(); err != nil {
				return 0, err
			}
			teu.mutation = mutation
			affected, err = teu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(teu.hooks) - 1; i >= 0; i-- {
			if teu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = teu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, teu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TicketEventUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TicketEventUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TicketEventUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teu *TicketEventUpdate) defaults() {
	if _, ok := teu.mutation.UpdatedAt(); !ok {
		v := ticketevent.UpdateDefaultUpdatedAt()
		teu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teu *TicketEventUpdate) check() error {
	if _, ok := teu.mutation.UserID(); teu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TicketEvent.user"`)
	}
	if _, ok := teu.mutation.TicketID(); teu.mutation.TicketCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TicketEvent.ticket"`)
	}
	return nil
}

func (teu *TicketEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticketevent.Table,
			Columns: ticketevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticketevent.FieldID,
			},
		},
	}
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.GetType(); ok {
		_spec.SetField(ticketevent.FieldType, field.TypeString, value)
	}
	if value, ok := teu.mutation.Metadada(); ok {
		_spec.SetField(ticketevent.FieldMetadada, field.TypeJSON, value)
	}
	if teu.mutation.MetadadaCleared() {
		_spec.ClearField(ticketevent.FieldMetadada, field.TypeJSON)
	}
	if value, ok := teu.mutation.Versions(); ok {
		_spec.SetField(ticketevent.FieldVersions, field.TypeString, value)
	}
	if teu.mutation.VersionsCleared() {
		_spec.ClearField(ticketevent.FieldVersions, field.TypeString)
	}
	if value, ok := teu.mutation.CreatedAt(); ok {
		_spec.SetField(ticketevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := teu.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if teu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.UserTable,
			Columns: []string{ticketevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.UserTable,
			Columns: []string{ticketevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.TicketTable,
			Columns: []string{ticketevent.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teu.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.TicketTable,
			Columns: []string{ticketevent.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TicketEventUpdateOne is the builder for updating a single TicketEvent entity.
type TicketEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketEventMutation
}

// SetTicketID sets the "ticket_id" field.
func (teuo *TicketEventUpdateOne) SetTicketID(u uuid.UUID) *TicketEventUpdateOne {
	teuo.mutation.SetTicketID(u)
	return teuo
}

// SetUserID sets the "user_id" field.
func (teuo *TicketEventUpdateOne) SetUserID(u uuid.UUID) *TicketEventUpdateOne {
	teuo.mutation.SetUserID(u)
	return teuo
}

// SetType sets the "type" field.
func (teuo *TicketEventUpdateOne) SetType(s string) *TicketEventUpdateOne {
	teuo.mutation.SetType(s)
	return teuo
}

// SetMetadada sets the "metadada" field.
func (teuo *TicketEventUpdateOne) SetMetadada(m map[string]interface{}) *TicketEventUpdateOne {
	teuo.mutation.SetMetadada(m)
	return teuo
}

// ClearMetadada clears the value of the "metadada" field.
func (teuo *TicketEventUpdateOne) ClearMetadada() *TicketEventUpdateOne {
	teuo.mutation.ClearMetadada()
	return teuo
}

// SetVersions sets the "versions" field.
func (teuo *TicketEventUpdateOne) SetVersions(s string) *TicketEventUpdateOne {
	teuo.mutation.SetVersions(s)
	return teuo
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (teuo *TicketEventUpdateOne) SetNillableVersions(s *string) *TicketEventUpdateOne {
	if s != nil {
		teuo.SetVersions(*s)
	}
	return teuo
}

// ClearVersions clears the value of the "versions" field.
func (teuo *TicketEventUpdateOne) ClearVersions() *TicketEventUpdateOne {
	teuo.mutation.ClearVersions()
	return teuo
}

// SetCreatedAt sets the "created_at" field.
func (teuo *TicketEventUpdateOne) SetCreatedAt(t time.Time) *TicketEventUpdateOne {
	teuo.mutation.SetCreatedAt(t)
	return teuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (teuo *TicketEventUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketEventUpdateOne {
	if t != nil {
		teuo.SetCreatedAt(*t)
	}
	return teuo
}

// SetUpdatedAt sets the "updated_at" field.
func (teuo *TicketEventUpdateOne) SetUpdatedAt(t time.Time) *TicketEventUpdateOne {
	teuo.mutation.SetUpdatedAt(t)
	return teuo
}

// SetUser sets the "user" edge to the User entity.
func (teuo *TicketEventUpdateOne) SetUser(u *User) *TicketEventUpdateOne {
	return teuo.SetUserID(u.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (teuo *TicketEventUpdateOne) SetTicket(t *Ticket) *TicketEventUpdateOne {
	return teuo.SetTicketID(t.ID)
}

// Mutation returns the TicketEventMutation object of the builder.
func (teuo *TicketEventUpdateOne) Mutation() *TicketEventMutation {
	return teuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (teuo *TicketEventUpdateOne) ClearUser() *TicketEventUpdateOne {
	teuo.mutation.ClearUser()
	return teuo
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (teuo *TicketEventUpdateOne) ClearTicket() *TicketEventUpdateOne {
	teuo.mutation.ClearTicket()
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TicketEventUpdateOne) Select(field string, fields ...string) *TicketEventUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TicketEvent entity.
func (teuo *TicketEventUpdateOne) Save(ctx context.Context) (*TicketEvent, error) {
	var (
		err  error
		node *TicketEvent
	)
	teuo.defaults()
	if len(teuo.hooks) == 0 {
		if err = teuo.check(); err != nil {
			return nil, err
		}
		node, err = teuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TicketEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = teuo.check(); err != nil {
				return nil, err
			}
			teuo.mutation = mutation
			node, err = teuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(teuo.hooks) - 1; i >= 0; i-- {
			if teuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = teuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, teuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TicketEvent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TicketEventMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TicketEventUpdateOne) SaveX(ctx context.Context) *TicketEvent {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TicketEventUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TicketEventUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (teuo *TicketEventUpdateOne) defaults() {
	if _, ok := teuo.mutation.UpdatedAt(); !ok {
		v := ticketevent.UpdateDefaultUpdatedAt()
		teuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (teuo *TicketEventUpdateOne) check() error {
	if _, ok := teuo.mutation.UserID(); teuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TicketEvent.user"`)
	}
	if _, ok := teuo.mutation.TicketID(); teuo.mutation.TicketCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TicketEvent.ticket"`)
	}
	return nil
}

func (teuo *TicketEventUpdateOne) sqlSave(ctx context.Context) (_node *TicketEvent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ticketevent.Table,
			Columns: ticketevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ticketevent.FieldID,
			},
		},
	}
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticketevent.FieldID)
		for _, f := range fields {
			if !ticketevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticketevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.GetType(); ok {
		_spec.SetField(ticketevent.FieldType, field.TypeString, value)
	}
	if value, ok := teuo.mutation.Metadada(); ok {
		_spec.SetField(ticketevent.FieldMetadada, field.TypeJSON, value)
	}
	if teuo.mutation.MetadadaCleared() {
		_spec.ClearField(ticketevent.FieldMetadada, field.TypeJSON)
	}
	if value, ok := teuo.mutation.Versions(); ok {
		_spec.SetField(ticketevent.FieldVersions, field.TypeString, value)
	}
	if teuo.mutation.VersionsCleared() {
		_spec.ClearField(ticketevent.FieldVersions, field.TypeString)
	}
	if value, ok := teuo.mutation.CreatedAt(); ok {
		_spec.SetField(ticketevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := teuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticketevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if teuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.UserTable,
			Columns: []string{ticketevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.UserTable,
			Columns: []string{ticketevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if teuo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.TicketTable,
			Columns: []string{ticketevent.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := teuo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticketevent.TicketTable,
			Columns: []string{ticketevent.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: ticket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TicketEvent{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticketevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
